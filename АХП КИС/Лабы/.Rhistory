if(lstate==1)
sk[1] = sk[1]+1
else
if(lstate==2)
sk[2] = sk[2]+1
else
if(lstate==3)
sk[3] = sk[3]+1
else
if(lstate==4)
sk[4] = sk[4]+1
lstate=findState(lstate)
}
}
sk
spos<-c(0,0,0,0)
for (i in c(1:4)) {
spos[i]<-sk[i]/400000
}
spos
sk<-c(0,0,0,0)
lstate = 1
for (j in c(1:100000)) {
for (i in c(1:4)) {
if(lstate==1)
sk[1] = sk[1]+1
else
if(lstate==2)
sk[2] = sk[2]+1
else
if(lstate==3)
sk[3] = sk[3]+1
else
if(lstate==4)
sk[4] = sk[4]+1
lstate=findState(lstate)
}
}
sk
spos<-c(0,0,0,0)
for (i in c(1:4)) {
spos[i]<-sk[i]/400000
}
spos
sk<-c(0,0,0,0)
for (j in c(1:100000)) {
lstate = 1
for (i in c(1:4)) {
if(lstate==1)
sk[1] = sk[1]+1
else
if(lstate==2)
sk[2] = sk[2]+1
else
if(lstate==3)
sk[3] = sk[3]+1
else
if(lstate==4)
sk[4] = sk[4]+1
lstate=findState(lstate)
}
}
# практика
sk<-c(0,0,0,0)
for (j in c(1:100000)) {
lstate = 1
for (i in c(1:4)) {
if(lstate==1)
sk[1] = sk[1]+1
else
if(lstate==2)
sk[2] = sk[2]+1
else
if(lstate==3)
sk[3] = sk[3]+1
else
if(lstate==4)
sk[4] = sk[4]+1
lstate=findState(lstate)
}
}
sk
spos<-c(0,0,0,0)
for (i in c(1:4)) {
spos[i]<-sk[i]/400000
}
spos
p0 %*% matrix.power(data.matrix(P),k)
# практика
sk<-c(0,0,0,0)
for (j in c(1:100000)) {
lstate = 1
for (i in c(1:4)) {
if(lstate==1)
sk[1] = sk[1]+1
else
if(lstate==2)
sk[2] = sk[2]+1
else
if(lstate==3)
sk[3] = sk[3]+1
else
if(lstate==4)
sk[4] = sk[4]+1
lstate=findState(lstate)
}
}
sk
spos<-c(0,0,0,0)
for (i in c(1:4)) {
spos[i]<-sk[i]/400000
}
spos
p0 %*% matrix.power(data.matrix(P),k)
sk<-c(0,0,0,0)
sk1<-c(0,0,0,0)
sk2<-c(0,0,0,0)
for (j in c(1:100000)) {
lstate = 1
for (i in c(1:4)) {
if(lstate==1)
sk[1] = sk[1]+1
else
if(lstate==2)
sk[2] = sk[2]+1
else
if(lstate==3)
sk[3] = sk[3]+1
else
if(lstate==4)
sk[4] = sk[4]+1
lstate=findState(lstate)
}
lstate = 1
for (i in c(1:3)) {
if(lstate==1)
sk1[1] = sk1[1]+1
else
if(lstate==2)
sk1[2] = sk1[2]+1
else
if(lstate==3)
sk1[3] = sk1[3]+1
else
if(lstate==4)
sk1[4] = sk1[4]+1
lstate=findState(lstate)
}
lstate = 1
for (i in c(1:2)) {
if(lstate==1)
sk2[1] = sk2[1]+1
else
if(lstate==2)
sk2[2] = sk2[2]+1
else
if(lstate==3)
sk2[3] = sk2[3]+1
else
if(lstate==4)
sk2[4] = sk2[4]+1
lstate=findState(lstate)
}
}
sk
sk1
sk2
spos<-c(0,0,0,0)
spos1<-c(0,0,0,0)
spos2<-c(0,0,0,0)
for (i in c(1:4)) {
spos[i]<-sk[i]/400000
}
for (i in c(1:3)) {
spos1[i]<-sk[i]/300000
}
for (i in c(1:2)) {
spos1[i]<-sk[i]/200000
}
spos
p0 %*% matrix.power(data.matrix(P),k)
spos1
p0 %*% matrix.power(data.matrix(P),k-1)
spos2
p0 %*% matrix.power(data.matrix(P),k-2)
for (i in c(1:2)) {
spos2[i]<-sk[i]/200000
}
spos
p0 %*% matrix.power(data.matrix(P),k)
spos1
p0 %*% matrix.power(data.matrix(P),k-1)
spos2
p0 %*% matrix.power(data.matrix(P),k-2)
# практика
sk<-c(0,0,0,0)
sk1<-c(0,0,0,0)
sk2<-c(0,0,0,0)
lstate = 1
for (j in c(1:100000)) {
for (i in c(1:4)) {
lstate=findState(lstate)
# if(lstate==1)
#   sk[1] = sk[1]+1
# else
#   if(lstate==2)
#     sk[2] = sk[2]+1
# else
#   if(lstate==3)
#     sk[3] = sk[3]+1
# else
#   if(lstate==4)
#     sk[4] = sk[4]+1
}
if(lstate==1)
sk[1] = sk[1]+1
else
if(lstate==2)
sk[2] = sk[2]+1
else
if(lstate==3)
sk[3] = sk[3]+1
else
if(lstate==4)
sk[4] = sk[4]+1
lstate = 1
for (i in c(1:3)) {
lstate=findState(lstate)
# if(lstate==1)
#   sk1[1] = sk1[1]+1
# else
#   if(lstate==2)
#     sk1[2] = sk1[2]+1
#   else
#     if(lstate==3)
#       sk1[3] = sk1[3]+1
#     else
#       if(lstate==4)
#         sk1[4] = sk1[4]+1
}
if(lstate==1)
sk1[1] = sk1[1]+1
else
if(lstate==2)
sk1[2] = sk1[2]+1
else
if(lstate==3)
sk1[3] = sk1[3]+1
else
if(lstate==4)
sk1[4] = sk1[4]+1
lstate = 1
for (i in c(1:2)) {
lstate=findState(lstate)
# if(lstate==1)
#   sk2[1] = sk2[1]+1
# else
#   if(lstate==2)
#     sk2[2] = sk2[2]+1
#   else
#     if(lstate==3)
#       sk2[3] = sk2[3]+1
#     else
#       if(lstate==4)
#         sk2[4] = sk2[4]+1
}
if(lstate==1)
sk2[1] = sk2[1]+1
else
if(lstate==2)
sk2[2] = sk2[2]+1
else
if(lstate==3)
sk2[3] = sk2[3]+1
else
if(lstate==4)
sk2[4] = sk2[4]+1
}
sk
sk1
sk2
spos<-c(0,0,0,0)
spos1<-c(0,0,0,0)
spos2<-c(0,0,0,0)
for (i in c(1:4)) {
spos[i]<-sk[i]/100000
}
for (i in c(1:3)) {
spos1[i]<-sk[i]/100000
}
for (i in c(1:2)) {
spos2[i]<-sk[i]/100000
}
spos
p0 %*% matrix.power(data.matrix(P),k)
spos1
p0 %*% matrix.power(data.matrix(P),k-1)
spos2
p0 %*% matrix.power(data.matrix(P),k-2)
# практика
sk<-c(0,0,0,0)
sk1<-c(0,0,0,0)
sk2<-c(0,0,0,0)
lstate = 1
for (j in c(1:100000)) {
for (i in c(1:4)) {
lstate=findState(lstate)
# if(lstate==1)
#   sk[1] = sk[1]+1
# else
#   if(lstate==2)
#     sk[2] = sk[2]+1
# else
#   if(lstate==3)
#     sk[3] = sk[3]+1
# else
#   if(lstate==4)
#     sk[4] = sk[4]+1
}
if(lstate==1)
sk[1] = sk[1]+1
else
if(lstate==2)
sk[2] = sk[2]+1
else
if(lstate==3)
sk[3] = sk[3]+1
else
if(lstate==4)
sk[4] = sk[4]+1
lstate = 1
for (i in c(1:3)) {
lstate=findState(lstate)
# if(lstate==1)
#   sk1[1] = sk1[1]+1
# else
#   if(lstate==2)
#     sk1[2] = sk1[2]+1
#   else
#     if(lstate==3)
#       sk1[3] = sk1[3]+1
#     else
#       if(lstate==4)
#         sk1[4] = sk1[4]+1
}
if(lstate==1)
sk1[1] = sk1[1]+1
else
if(lstate==2)
sk1[2] = sk1[2]+1
else
if(lstate==3)
sk1[3] = sk1[3]+1
else
if(lstate==4)
sk1[4] = sk1[4]+1
lstate = 1
for (i in c(1:2)) {
lstate=findState(lstate)
# if(lstate==1)
#   sk2[1] = sk2[1]+1
# else
#   if(lstate==2)
#     sk2[2] = sk2[2]+1
#   else
#     if(lstate==3)
#       sk2[3] = sk2[3]+1
#     else
#       if(lstate==4)
#         sk2[4] = sk2[4]+1
}
if(lstate==1)
sk2[1] = sk2[1]+1
else
if(lstate==2)
sk2[2] = sk2[2]+1
else
if(lstate==3)
sk2[3] = sk2[3]+1
else
if(lstate==4)
sk2[4] = sk2[4]+1
}
sk
sk1
sk2
spos<-c(0,0,0,0)
spos1<-c(0,0,0,0)
spos2<-c(0,0,0,0)
for (i in c(1:4)) {
spos[i]<-sk[i]/100000
}
for (i in c(1:3)) {
spos1[i]<-sk1[i]/100000
}
for (i in c(1:2)) {
spos2[i]<-sk2[i]/100000
}
spos
p0 %*% matrix.power(data.matrix(P),k)
spos1
p0 %*% matrix.power(data.matrix(P),k-1)
spos2
p0 %*% matrix.power(data.matrix(P),k-2)
sk
sk1
sk2
# практика
sk<-c(0,0,0,0)
sk1<-c(0,0,0,0)
sk2<-c(0,0,0,0)
lstate = 1
for (j in c(1:100000)) {
for (i in c(1:4)) {
lstate=findState(lstate)
# if(lstate==1)
#   sk[1] = sk[1]+1
# else
#   if(lstate==2)
#     sk[2] = sk[2]+1
# else
#   if(lstate==3)
#     sk[3] = sk[3]+1
# else
#   if(lstate==4)
#     sk[4] = sk[4]+1
}
if(lstate==1)
sk[1] = sk[1]+1
else
if(lstate==2)
sk[2] = sk[2]+1
else
if(lstate==3)
sk[3] = sk[3]+1
else
if(lstate==4)
sk[4] = sk[4]+1
lstate = 1
for (i in c(1:3)) {
lstate=findState(lstate)
# if(lstate==1)
#   sk1[1] = sk1[1]+1
# else
#   if(lstate==2)
#     sk1[2] = sk1[2]+1
#   else
#     if(lstate==3)
#       sk1[3] = sk1[3]+1
#     else
#       if(lstate==4)
#         sk1[4] = sk1[4]+1
}
if(lstate==1)
sk1[1] = sk1[1]+1
else
if(lstate==2)
sk1[2] = sk1[2]+1
else
if(lstate==3)
sk1[3] = sk1[3]+1
else
if(lstate==4)
sk1[4] = sk1[4]+1
lstate = 1
for (i in c(1:2)) {
lstate=findState(lstate)
# if(lstate==1)
#   sk2[1] = sk2[1]+1
# else
#   if(lstate==2)
#     sk2[2] = sk2[2]+1
#   else
#     if(lstate==3)
#       sk2[3] = sk2[3]+1
#     else
#       if(lstate==4)
#         sk2[4] = sk2[4]+1
}
if(lstate==1)
sk2[1] = sk2[1]+1
else
if(lstate==2)
sk2[2] = sk2[2]+1
else
if(lstate==3)
sk2[3] = sk2[3]+1
else
if(lstate==4)
sk2[4] = sk2[4]+1
}
sk
sk1
sk2
spos<-c(0,0,0,0)
spos1<-c(0,0,0,0)
spos2<-c(0,0,0,0)
for (i in c(1:4)) {
spos[i]<-sk[i]/100000
}
for (i in c(1:4)) {
spos1[i]<-sk1[i]/100000
}
for (i in c(1:4)) {
spos2[i]<-sk2[i]/100000
}
spos
p0 %*% matrix.power(data.matrix(P),k)
spos1
p0 %*% matrix.power(data.matrix(P),k-1)
spos2
p0 %*% matrix.power(data.matrix(P),k-2)
