a3<-lambda[3]*tau
#Функция rpois из пакета stats генерит случайные числа, распределенные по закону Пуассона с параметром a=lambda*tau
X1<-rpois(n,a1)
X2<-rpois(n,a2)
X3<-rpois(n,a3)
for (variable in c(1:300000)) {
p1<-(((lambda[1]*tau)^X1[variable])/factorial(n))*exp(-a1)
p2<-(((lambda[2]*tau)^X2[variable])/factorial(n))*exp(-a2)
p3<-(((lambda[3]*tau)^X3[variable])/factorial(n))*exp(-a3)
}
p1
p2
p3
set.seed(Variant)
lambda<-runif(3)
lambda
n<-300000
# lambda=1.2
tau<-2
a1<-lambda[1]*tau
a2<-lambda[2]*tau
a3<-lambda[3]*tau
#Функция rpois из пакета stats генерит случайные числа, распределенные по закону Пуассона с параметром a=lambda*tau
X1<-rpois(n,a1)
X2<-rpois(n,a2)
X3<-rpois(n,a3)
for (variable in c(1:300000)) {
p21<-(((lambda[1]*tau)^X1[variable])/factorial(n))*exp(-a1)
p22<-(((lambda[2]*tau)^X2[variable])/factorial(n))*exp(-a2)
p23<-(((lambda[3]*tau)^X3[variable])/factorial(n))*exp(-a3)
}
p1
p2
p3
install.packages(stats)
library(stats)
set.seed(Variant)
lambda<-runif(3)
lambda
n<-300000
# lambda=1.2
tau<-2
a1<-lambda[1]*tau
a2<-lambda[2]*tau
a3<-lambda[3]*tau
#Функция rpois из пакета stats генерит случайные числа, распределенные по закону Пуассона с параметром a=lambda*tau
X1<-rpois(n,a1)
X2<-rpois(n,a2)
X3<-rpois(n,a3)
for (variable in c(1:300000)) {
p21<-(((lambda[1]*tau)^X1[variable])/factorial(n))*exp(-a1)
p22<-(((lambda[2]*tau)^X2[variable])/factorial(n))*exp(-a2)
p23<-(((lambda[3]*tau)^X3[variable])/factorial(n))*exp(-a3)
}
p1
p2
p3
print(length(x[x==0])/n)
print(length(x[x==1])/n)
print(length(x[x>=1])/n)
set.seed(Variant)
lambda<-runif(3)
lambda
n<-300000
# lambda=1.2
tau<-2
a1<-lambda[1]*tau
a2<-lambda[2]*tau
a3<-lambda[3]*tau
#Функция rpois из пакета stats генерит случайные числа, распределенные по закону Пуассона с параметром a=lambda*tau
X1<-rpois(n,a1)
X2<-rpois(n,a2)
X3<-rpois(n,a3)
p21<-c()
p22<-c()
p23<-c()
for (variable in c(1:300000)) {
p21<-(((lambda[1]*tau)^X1[variable])/factorial(n))*exp(-a1)
p22<-(((lambda[2]*tau)^X2[variable])/factorial(n))*exp(-a2)
p23<-(((lambda[3]*tau)^X3[variable])/factorial(n))*exp(-a3)
}
p1
p2
p3
set.seed(Variant)
lambda<-runif(3)
lambda
n<-300000
# lambda=1.2
tau<-2
a1<-lambda[1]*tau
a2<-lambda[2]*tau
a3<-lambda[3]*tau
#Функция rpois из пакета stats генерит случайные числа, распределенные по закону Пуассона с параметром a=lambda*tau
X1<-rpois(n,a1)
X2<-rpois(n,a2)
X3<-rpois(n,a3)
p21<-c()
p22<-c()
p23<-c()
for (variable in c(1:300000)) {
p21[variable]<-(((lambda[1]*tau)^X1[variable])/factorial(n))*exp(-a1)
p22[variable]<-(((lambda[2]*tau)^X2[variable])/factorial(n))*exp(-a2)
p23[variable]<-(((lambda[3]*tau)^X3[variable])/factorial(n))*exp(-a3)
}
p1
p2
p3
set.seed(Variant)
lambda<-runif(3)
lambda
n<-300000
# lambda=1.2
tau<-2
a1<-lambda[1]*tau
a2<-lambda[2]*tau
a3<-lambda[3]*tau
#Функция rpois из пакета stats генерит случайные числа, распределенные по закону Пуассона с параметром a=lambda*tau
X1<-rpois(n,a1)
X2<-rpois(n,a2)
X3<-rpois(n,a3)
p21<-c()
p22<-c()
p23<-c()
for (variable in c(1:300000)) {
p21<-(((lambda[1]*tau)^X1[variable])/factorial(n))*exp(-a1)
p22<-(((lambda[2]*tau)^X2[variable])/factorial(n))*exp(-a2)
p23<-(((lambda[3]*tau)^X3[variable])/factorial(n))*exp(-a3)
}
p21
p22
p23
set.seed(Variant)
lambda<-runif(3)
lambda
n<-300000
# lambda=1.2
tau<-2
a1<-lambda[1]*tau
a2<-lambda[2]*tau
a3<-lambda[3]*tau
#Функция rpois из пакета stats генерит случайные числа, распределенные по закону Пуассона с параметром a=lambda*tau
X1<-rpois(n,a1)
X2<-rpois(n,a2)
X3<-rpois(n,a3)
p21<-c()
p22<-c()
p23<-c()
for (variable in c(1:300000)) {
p21[variable]<-(((lambda[1]*tau)^X1[variable])/factorial(n))*exp(-a1)
p22[variable]<-(((lambda[2]*tau)^X2[variable])/factorial(n))*exp(-a2)
p23[variable]<-(((lambda[3]*tau)^X3[variable])/factorial(n))*exp(-a3)
}
p21
p22
p23
print(length(x[x==0
set.seed(Variant)
set.seed(Variant)
lambda<-runif(3)
lambda
n<-300000
# lambda=1.2
tau<-2
a1<-lambda[1]*tau
a2<-lambda[2]*tau
a3<-lambda[3]*tau
#Функция rpois из пакета stats генерит случайные числа, распределенные по закону Пуассона с параметром a=lambda*tau
X1<-rpois(n,a1)
X2<-rpois(n,a2)
X3<-rpois(n,a3)
p21<-c()
p22<-c()
p23<-c()
for (variable in c(1:300000)) {
p21[variable]<-(((lambda[1]*tau)^X1[variable])/factorial(X1[variable]))*exp(-a1)
p22[variable]<-(((lambda[2]*tau)^X2[variable])/factorial(X2[variable]))*exp(-a2)
p23[variable]<-(((lambda[3]*tau)^X3[variable])/factorial(X3[variable]))*exp(-a3)
}
p21
p22
p23
set.seed(Variant)
lambda<-runif(3)
lambda
n<-300000
# lambda=1.2
tau<-2
a1<-lambda[1]*tau
a2<-lambda[2]*tau
a3<-lambda[3]*tau
#Функция rpois из пакета stats генерит случайные числа, распределенные по закону Пуассона с параметром a=lambda*tau
X1<-rpois(n,a1)
X2<-rpois(n,a2)
X3<-rpois(n,a3)
p21<-c()
p22<-c()
p23<-c()
for (variable in c(1:300000)) {
p21<-(((lambda[1]*tau)^X1[variable])/factorial(X1[variable]))*exp(-a1)
p22[variable]<-(((lambda[2]*tau)^X2[variable])/factorial(X2[variable]))*exp(-a2)
p23[variable]<-(((lambda[3]*tau)^X3[variable])/factorial(X3[variable]))*exp(-a3)
}
p21
set.seed(Variant)
lambda<-runif(3)
lambda
n<-300000
# lambda=1.2
tau<-2
a1<-lambda[1]*tau
a2<-lambda[2]*tau
a3<-lambda[3]*tau
#Функция rpois из пакета stats генерит случайные числа, распределенные по закону Пуассона с параметром a=lambda*tau
X1<-rpois(n,a1)
X2<-rpois(n,a2)
X3<-rpois(n,a3)
p21<-c(1:300000)
p22<-c()
p23<-c()
for (variable in c(1:300000)) {
p21<-(((lambda[1]*tau)^X1[variable])/factorial(X1[variable]))*exp(-a1)
p22[variable]<-(((lambda[2]*tau)^X2[variable])/factorial(X2[variable]))*exp(-a2)
p23[variable]<-(((lambda[3]*tau)^X3[variable])/factorial(X3[variable]))*exp(-a3)
}
p21
set.seed(Variant)
lambda<-runif(3)
lambda
n<-300000
# lambda=1.2
tau<-2
a1<-lambda[1]*tau
a2<-lambda[2]*tau
a3<-lambda[3]*tau
#Функция rpois из пакета stats генерит случайные числа, распределенные по закону Пуассона с параметром a=lambda*tau
X1<-rpois(n,a1)
X2<-rpois(n,a2)
X3<-rpois(n,a3)
# p21<-c()
# p22<-c()
# p23<-c()
for (variable in c(1:300000)) {
p21[variable]<-(((lambda[1]*tau)^X1[variable])/factorial(X1[variable]))*exp(-a1)
p22[variable]<-(((lambda[2]*tau)^X2[variable])/factorial(X2[variable]))*exp(-a2)
p23[variable]<-(((lambda[3]*tau)^X3[variable])/factorial(X3[variable]))*exp(-a3)
}
p21
p22
p23
print(length(X1[x==0])/n)
print(length(X1[x==1])/n)
print(length(X1[x>=1])/n)
set.seed(Variant)
lambda<-runif(3)
lambda
n<-300000
# lambda=1.2
tau<-2
a1<-lambda[1]*tau
a2<-lambda[2]*tau
a3<-lambda[3]*tau
#Функция rpois из пакета stats генерит случайные числа, распределенные по закону Пуассона с параметром a=lambda*tau
X1<-rpois(n,a1)
X2<-rpois(n,a2)
X3<-rpois(n,a3)
# p21<-c()
# p22<-c()
# p23<-c()
for (variable in c(1:300000)) {
p21[variable]<-(((lambda[1]*tau)^X1[variable])/factorial(X1[variable]))*exp(-a1)
p22[variable]<-(((lambda[2]*tau)^X2[variable])/factorial(X2[variable]))*exp(-a2)
p23[variable]<-(((lambda[3]*tau)^X3[variable])/factorial(X3[variable]))*exp(-a3)
}
p21
p22
p23
print(length(X1[x==0])/n)
print(length(X1[x==1])/n)
print(length(X1[x>=1])/n)
set.seed(Variant)
lambda<-runif(3)
lambda
n<-300000
# lambda=1.2
tau<-2
a1<-lambda[1]*tau
a2<-lambda[2]*tau
a3<-lambda[3]*tau
#Функция rpois из пакета stats генерит случайные числа, распределенные по закону Пуассона с параметром a=lambda*tau
X1<-rpois(n,a1)
X2<-rpois(n,a2)
X3<-rpois(n,a3)
# p21<-c()
# p22<-c()
# p23<-c()
for (variable in c(1:300000)) {
p21[variable]<-(((lambda[1]*tau)^X1[variable])/factorial(X1[variable]))*exp(-a1)
p22[variable]<-(((lambda[2]*tau)^X2[variable])/factorial(X2[variable]))*exp(-a2)
p23[variable]<-(((lambda[3]*tau)^X3[variable])/factorial(X3[variable]))*exp(-a3)
M21<-M21+p21[variable]*X1[variable]
}
M21<-sum(p21*X1)
M21
set.seed(Variant)
lambda<-runif(3)
lambda
n<-300000
# lambda=1.2
tau<-2
a1<-lambda[1]*tau
a2<-lambda[2]*tau
a3<-lambda[3]*tau
#Функция rpois из пакета stats генерит случайные числа, распределенные по закону Пуассона с параметром a=lambda*tau
X1<-rpois(n,a1)
X2<-rpois(n,a2)
X3<-rpois(n,a3)
# p21<-c()
# p22<-c()
# p23<-c()
for (variable in c(1:300000)) {
p21[variable]<-(((lambda[1]*tau)^X1[variable])/factorial(X1[variable]))*exp(-a1)
p22[variable]<-(((lambda[2]*tau)^X2[variable])/factorial(X2[variable]))*exp(-a2)
p23[variable]<-(((lambda[3]*tau)^X3[variable])/factorial(X3[variable]))*exp(-a3)
}
p21
p22
p23
M21<-sum(p21*X1)
M21
ME21<-mean(X1)
ME21
set.seed(Variant)
lambda<-runif(3)
lambda
n<-300000
# lambda=1.2
tau<-2
a1<-lambda[1]*tau
a2<-lambda[2]*tau
a3<-lambda[3]*tau
#Функция rpois из пакета stats генерит случайные числа, распределенные по закону Пуассона с параметром a=lambda*tau
X1<-rpois(n,a1)
X2<-rpois(n,a2)
X3<-rpois(n,a3)
# p21<-c()
# p22<-c()
# p23<-c()
print("Мат. ожидание")
print(paste("meanX1=", mean(X1)))
print("дисперсия")
print(paste("varX1=", var(X1)))
print("ср. кв. отклонение")
print(paste("sdX1=", sd(X1)))
print("______________________________")
print("Мат. ожидание")
print(paste("meanX2=", mean(X2)))
print("дисперсия")
print(paste("varX2=", var(X2)))
print("ср. кв. отклонение")
print(paste("sdX1=", sd(X2)))
print("______________________________")
print("Мат. ожидание")
print(paste("meanX3=", mean(X3)))
print("дисперсия")
print(paste("varX3=", var(X3)))
print("ср. кв. отклонение")
print(paste("sdX3=", sd(X3)))
print("______________________________")
print("Мат. ожидание")
print(paste("meanX1=", mean(X1)))
print("дисперсия")
print(paste("varX1=", var(X1)))
print("ср. кв. отклонение")
print(paste("sdX1=", sd(X1)))
print("______________________________")
print("Мат. ожидание")
print(paste("meanX2=", mean(X2)))
print("дисперсия")
print(paste("varX2=", var(X2)))
print("ср. кв. отклонение")
print(paste("sdX1=", sd(X2)))
print("______________________________")
print("Мат. ожидание")
print(paste("meanX3=", mean(X3)))
print("дисперсия")
print(paste("varX3=", var(X3)))
print("ср. кв. отклонение")
print(paste("sdX3=", sd(X3)))
print("______________________________")
print("Мат. ожидание суммы")
print(mean(X1+X2+X3))
print("дисперсия суммы")
print(var(X1+X2+X3))
print("ср. кв. отклонение суммы")
print(sd(X1+X2+X3))
print("______________________________")
Variant<-14
set.seed(Variant)
a<-runif(3) # a=lambda*tau ==теоретическое мат.ожидание и дисперсия
#дисперсия случайной величины, распределенной по закону Пуассона, равна ее математическому ожиданию
n<-300000 # произвольное количество
#Функция rpois из пакета stats генерит случайные числа, распределенные по закону Пуассона с параметром a=lambda*tau
library(stats)
X1<-rpois(n,a[1])
X2<-rpois(n,a[2])
X3<-rpois(n,a[3])
X<-X1+X2+X3
#1 способ
a_M<-a[1]+a[2]+a[3] #теоретическое мат.ожидание и дисперсия распр. по закону Пуаммона равны
a_D<-a[1]+a[2]+a[3]
a_sd<-sqrt(a_D) # средне квадратичное
a_k<-(a_sd/a_M)*100
#2 способ
M_py<-mean(X)
sd_py<-sd(X) # средне квадратичное
D_py<-sd_py^2 #дисперсия
K_py<-(sd_py/M_py)*100
# выведем значения
var_1<-c(a_M,a_D,a_sd,a_k)
var_2<-c(M_py,D_py,sd_py,K_py)
new_matrix1<-rbind(var_1,var_2)
new_matrix1
mean(X1)
print(paste("Мат. ожидание, дисперсия, ср. кв. отклонение", mean(X1), var(X1), sd(X1)))
print(paste("Мат. ожидание, дисперсия, ср. кв. отклонение", mean(X1), var(X1), sd(X1)))
print("______________________________")
print(paste("Мат. ожидание, дисперсия, ср. кв. отклонение", mean(X2), var(X2), sd(X2)))
print("______________________________")
print(paste("Мат. ожидание, дисперсия, ср. кв. отклонение", mean(X3), var(X3), sd(X3)))
print("______________________________")
print(paste("Мат. ожидание, дисперсия, ср. кв. отклонение", mean(X1+X2+X3), var(X1+X2+X3), sd(X1+X2+X3)))
print("______________________________")
print(paste("Мат. ожидание, дисперсия, ср. кв. отклонение", mean(X1), var(X1), sd(X1)))
print(paste("Мат. ожидание, дисперсия, ср. кв. отклонение", mean(X2), var(X2), sd(X2)))
print(paste("Мат. ожидание, дисперсия, ср. кв. отклонение", mean(X3), var(X3), sd(X3)))
print(paste("Мат. ожидание, дисперсия, ср. кв. отклонение", mean(X1+X2+X3), var(X1+X2+X3), sd(X1+X2+X3)))
set.seed(Variant)
lambda<-runif(3)
lambda
Variant<-14
set.seed(Variant)
a<-runif(3) # a=lambda*tau ==теоретическое мат.ожидание и дисперсия
#дисперсия случайной величины, распределенной по закону Пуассона, равна ее математическому ожиданию
n<-300000 # произвольное количество
#Функция rpois из пакета stats генерит случайные числа, распределенные по закону Пуассона с параметром a=lambda*tau
library(stats)
X1<-rpois(n,a[1])
X2<-rpois(n,a[2])
X3<-rpois(n,a[3])
X<-X1+X2+X3
#1 способ
a_M<-a[1]+a[2]+a[3] #теоретическое мат.ожидание и дисперсия распр. по закону Пуаммона равны
a_D<-a[1]+a[2]+a[3]
a_sd<-sqrt(a_D) # средне квадратичное
a_k<-(a_sd/a_M)*100
#2 способ
M_py<-mean(X)
sd_py<-sd(X) # средне квадратичное
D_py<-sd_py^2 #дисперсия
K_py<-(sd_py/M_py)*100
# выведем значения
var_1<-c(a_M,a_D,a_sd,a_k)
var_2<-c(M_py,D_py,sd_py,K_py)
new_matrix1<-rbind(var_1,var_2)
new_matrix1
Variant<-1
alpha<-runif(7)[7]
alpha
source("C:/Users/user/Desktop/Учёба/8 семестр/АХП КИС/Лабы/Lab2.R", echo=TRUE)
Variant<-1
set.seed(Variant)
alpha<-runif(7)[7]
alpha
library(stats)
n<-300000
k <-c()
for (i in c(1:n)){
i<-sum(rexp(5, alpha))
k <- c(k, i)
}
k
mean(times)
mean(k)
5/alpha
mean(k)
5/alpha
var(k)
5/(alpha^2)
library(stats)
n<-300000
t <-c()
for (i in c(1:n)){
i<-sum(rexp(5, alpha))
t <- c(t, i)
}
library(stats)
n<-30000
t <-c()
for (i in c(1:n)){
i<-sum(rexp(5, alpha))
t <- c(t, i)
}
t
mean(t)
5/alpha
var(t)
5/(alpha^2)
Variant<-1
set.seed(Variant)
alpha<-runif(100)[77]
alpha
